/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.86
 * Generated at: 2024-06-10 02:00:26 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.firstmain;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import trip.vo.*;
import trip.dao.*;
import trip.dto.*;
import java.io.*;
import java.util.*;

public final class getmsg_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(8);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("trip.vo");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("trip.dao");
    _jspx_imports_packages.add("trip.dto");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/xml; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("\r\n");
      out.write("  \r\n");

request.setCharacterEncoding("UTF-8");

//로그인 여부를 세션을 통해 검사한다
userVO login  = (userVO)session.getAttribute("login");

ArrayList<chatVO> cvo_List  = new ArrayList<chatVO>();
chatDTO cdto = new chatDTO();
userDTO udto = new userDTO();

//채팅방 전체내용을 가져온다
cvo_List = cdto.GetList_All();


//이전채팅내용 전체불러오기
for(chatVO cvo : cvo_List)
{
	//회원들의 프로필 아이콘 가져오기
	userVO uvo   = udto.ShowUser(cvo.getUnick());
	//DB아이콘 숫자변환작업
	String icon = "😄";
	switch (uvo.getUicon())
	{
	case "1": icon  = "😄"; break;     				  
	case "2": icon  = "😆"; break;  
	case "3": icon  = "😅"; break;  
	case "4": icon  = "😀"; break;  
	case "5": icon  = "😨"; break;  
	case "6": icon  = "👿"; break;  
	case "7": icon  = "😝"; break;  
	case "8": icon  = "😷"; break;  
	case "9": icon  = "😴"; break;  
	case "10": icon  = "😱"; break; 
	}
	
	//작성된 채팅 시간표현 부분
 	String day = "";
	int date = Integer.parseInt(cvo.getCwdate());
	if(date < 60)
	{
		day  = " 분전]";
	}
	if(date >= 60 && date < 1440)
	{
		date = date / 60;
		day  = " 시간전]";
	}
	if( date >= 1440 && date < 44640)
	{
		date = date / 31;
		day  = " 일전]";
	}
	if( date >= 44640 && date < 535680)
	{
		date = date / 12;
		day  = " 달전]";
	}
	
      out.write("\r\n");
      out.write("	<!-- 전체 채팅방 내용 -->\r\n");
      out.write("	<div>");
      out.print( icon );
      out.print( cvo.getUnick() );
      out.write(' ');
      out.write(':');
      out.write(' ');
      out.print( cvo.getCnote() );
      out.write('[');
      out.print( date );
      out.print( day );
      out.write(" </div>\r\n");
      out.write("	");

}

      out.write('\r');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
