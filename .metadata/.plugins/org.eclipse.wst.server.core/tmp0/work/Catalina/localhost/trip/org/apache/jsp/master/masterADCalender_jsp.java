/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.86
 * Generated at: 2024-06-20 08:00:56 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.master;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;

public final class masterADCalender_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");

int year = 0;
int month = 0;

String get_year  = request.getParameter("year"); 
String get_month = request.getParameter("month");

if(get_year == null || get_year == null || get_month.equals("") || get_month.equals("")) 
{
	Calendar today = Calendar.getInstance();
	year = today.get(Calendar.YEAR);
	month = today.get(Calendar.MONTH);
	
}else
{
	year = Integer.parseInt(request.getParameter("year"));
	month = Integer.parseInt(request.getParameter("month"));

	if(month == -1)
	{
		month = 11;
		year--;
	}
	
	if(month == 12)
	{
		month = 0;
		year++;
	}

}

	Calendar firstDate = Calendar.getInstance();
	firstDate.set(Calendar.YEAR, year);
	firstDate.set(Calendar.MONTH, month);
	firstDate.set(Calendar.DATE, 1);
	int firstDay = firstDate.get(Calendar.DAY_OF_WEEK);
	int lastDate = firstDate.getActualMaximum(Calendar.DATE);
	
	int startBlankCnt = firstDay - 1;
	int endBlankCnt = 0;
	if((startBlankCnt+lastDate)%7 != 0)
	{
		endBlankCnt = 7 - (startBlankCnt+lastDate) % 7;
	}
	
	int tdCnt = startBlankCnt + lastDate + endBlankCnt;

      out.write("\r\n");
      out.write("<script src=\"../js/jquery-3.7.1.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("var year  = ");
      out.print( year );
      out.write("\r\n");
      out.write("var month = ");
      out.print( month );
      out.write("\r\n");
      out.write("\r\n");
      out.write("function goto_last_month()\r\n");
      out.write("{\r\n");
      out.write("	\r\n");
      out.write("	$.ajax({\r\n");
      out.write("		type : \"post\",\r\n");
      out.write("		url  : \"masterADCalender.jsp\",\r\n");
      out.write("		data :\r\n");
      out.write("		{\r\n");
      out.write("			year  : year,\r\n");
      out.write("			month : month-1\r\n");
      out.write("		},\r\n");
      out.write("		dataType : \"html\",\r\n");
      out.write("		success : function(result)\r\n");
      out.write("		{\r\n");
      out.write("			result = result.trim();\r\n");
      out.write("			$(\"#calender_td\").html(result);\r\n");
      out.write("\r\n");
      out.write("		}\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function goto_next_month()\r\n");
      out.write("{\r\n");
      out.write("	\r\n");
      out.write("	$.ajax({\r\n");
      out.write("		type : \"post\",\r\n");
      out.write("		url  : \"masterADCalender.jsp\",\r\n");
      out.write("		data :\r\n");
      out.write("		{\r\n");
      out.write("			year  : year,\r\n");
      out.write("			month : month+1\r\n");
      out.write("		},\r\n");
      out.write("		dataType : \"html\",\r\n");
      out.write("		success : function(result)\r\n");
      out.write("		{\r\n");
      out.write("			result = result.trim();\r\n");
      out.write("			$(\"#calender_td\").html(result);\r\n");
      out.write("\r\n");
      out.write("		}\r\n");
      out.write("	});\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("	<head>\r\n");
      out.write("		<meta charset=\"UTF-8\">\r\n");
      out.write("		<title>달력</title>\r\n");
      out.write("		<style>\r\n");
      out.write("			\r\n");
      out.write("		</style>\r\n");
      out.write("	</head>\r\n");
      out.write("	<body>\r\n");
      out.write("		<div style=\"text-align : center;\">\r\n");
      out.write("			<button type=\"button\" onclick=\"goto_last_month()\">이전 달</button>\r\n");
      out.write("			");
      out.print(year);
      out.write('년');
      out.write(' ');
      out.print(month+1);
      out.write("월\r\n");
      out.write("			<button type=\"button\" onclick=\"goto_next_month()\">다음 달</button>\r\n");
      out.write("		</div>\r\n");
      out.write("		<table border=\"1\" width=\"500px\" height=\"300px\">\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th>일</th>\r\n");
      out.write("				<th>월</th>\r\n");
      out.write("				<th>화</th>\r\n");
      out.write("				<th>수</th>\r\n");
      out.write("				<th>목</th>\r\n");
      out.write("				<th>금</th>\r\n");
      out.write("				<th>토</th>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				");

					for(int i = 1; i <= tdCnt; i++) 
					{
						
      out.write("\r\n");
      out.write("						<td>\r\n");
      out.write("							");

							if(i > startBlankCnt && i <= startBlankCnt + lastDate) 
							{
								if(i % 7 == 0)
								{
									
      out.write("<span>");
      out.print(i-startBlankCnt);
      out.write("</span>");

								}else if(i%7 == 1) 
								{
									
      out.write("<span>");
      out.print(i-startBlankCnt);
      out.write("</span>");

								
								}else
								{
									
      out.print(i-startBlankCnt);

								}	
							}else 
							{
								
      out.write("&nbsp;");

							}
							
      out.write("\r\n");
      out.write("						</td>\r\n");
      out.write("						");
	
						if(i!=tdCnt && i%7 == 0)
						{
							
      out.write("</tr><tr>");

						}
					}
				
      out.write("\r\n");
      out.write("			</tr>\r\n");
      out.write("		</table>\r\n");
      out.write("	</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
