package trip.dto;
import trip.dao.*;
import trip.vo.*;
import java.util.*;
import java.io.*;
import java.text.*;

public class advertDTO extends DBManager
{
	// 상품출력
	public ArrayList<advertVO> ad(String subclass)
	{
		ArrayList<advertVO> list = new ArrayList<advertVO>();
		if( this.DBOpen() == false )
		{
			return list;
		}	
		String sql = "";
		sql  = "SELECT * FROM trip.ad where subclass ='" + subclass +"'";
		System.out.println(sql);
		
		this.OpenQuery(sql);		
		while(this.GetNext())
		{
			advertVO vo = new advertVO();
			
			vo.setAdvertno(this.GetValue("advertno"));
			vo.setCategory(this.GetValue("category"));
			vo.setSubclass(this.GetValue("subclass"));
			vo.setPrice(this.GetValue("price"));
			vo.setProductName(this.GetValue("productName"));
			vo.setImageURL(this.GetValue("imageURL"));
			vo.setDetailURL(this.GetValue("detailURL"));
			vo.setExposure_count(this.GetValue("exposure_count"));
			
			list.add(vo);
		}
		
		this.DBClose();
		return list;
	}
	
	// 상품출력
	public advertVO ad_limit(String subclass)
	{
		advertVO vo = new advertVO();
		
		if( this.DBOpen() == false )
		{
			return null;
		}	
		
		String sql = "";
		sql  = "SELECT * FROM trip.ad where subclass ='" + subclass +"'" ;
		System.out.println(sql);
		
		this.OpenQuery(sql);		
		if(this.GetNext() == true)
		{
			vo.setAdvertno(this.GetValue("advertno"));
			vo.setCategory(this.GetValue("category"));
			vo.setSubclass(this.GetValue("subclass"));
			vo.setPrice(this.GetValue("price"));
			vo.setProductName(this.GetValue("productName"));
			vo.setImageURL(this.GetValue("imageURL"));
			vo.setDetailURL(this.GetValue("detailURL"));
			vo.setExposure_count(this.GetValue("exposure_count"));
		}else
		{
			return null;
		}
		
		this.DBClose();
		return vo;
	}
	
	// 유사한 상품
	public ArrayList<positiveVO> similarad(String bno, int limit4)
	{
		ArrayList<positiveVO> list = new ArrayList<positiveVO>();
		if( this.DBOpen() == false )
		{
			return list;
		}	
		String sql = "";
		sql  = "select bsno,bskey,bsfr,bkno,bsad, ";
		sql += "(select bkno from bkeyword where bkno = bsimilar.bkno) as bkno, ";
		sql += "(select bkey from bkeyword where bkno = bsimilar.bkno) as bkey ";
		sql += "from bsimilar ";
		sql += "where bkno = any(select bkno from bkeyword where bno = " + bno + " )";
		sql += " and bsad is not null ";
		sql += " order by bsfr desc";
		sql += " limit 0," + limit4;
		System.out.println(sql);
		
		this.OpenQuery(sql);		
		while(this.GetNext())
		{
			positiveVO vo = new positiveVO();
			
			vo.setBsno(this.GetValue("bsno"));
			vo.setBskey(this.GetValue("bskey"));
			vo.setBsfr(this.GetValue("bsfr"));
			vo.setBkno(this.GetValue("bkno"));
			vo.setBkey(this.GetValue("bkey"));
			vo.setBsad(this.GetValue("bsad"));
			
			list.add(vo);
		}
		
		this.DBClose();
		return list;
	}	
	
	public int SimilarTotal(String bno)
	{
		int total = 0;
		if( this.DBOpen() == false )
		{
			return total;
		}
		
		String sql = "";
		sql  = "select count(*) as count ";
		sql += "from bsimilar ";
		sql += "where bkno = any(select bkno from bkeyword where bno = " + bno + " )";
		sql += " and bsad is not null ";
		System.out.println(sql);
		
		
		this.OpenQuery(sql);
		if(this.GetNext() == true)
		{
			total = this.GetInt("count");
		}
		this.CloseQuery();
		
		this.DBClose();
		return total;
	}
	
	// 유사한 상품 1개만
	public ArrayList<positiveVO> similarad_limit(String bno,int count)
	{
		ArrayList<positiveVO> list = new ArrayList<positiveVO>();
		if( this.DBOpen() == false )
		{
			return null;
		}	
		String sql = "";
		sql  = "select bsno,bskey,bsfr,bkno,bsad, ";
		sql += "(select bkno from bkeyword where bkno = bsimilar.bkno) as bkno, ";
		sql += "(select bkey from bkeyword where bkno = bsimilar.bkno) as bkey ";
		sql += "from bsimilar ";
		sql += "where bkno = any(select bkno from bkeyword where bno = " + bno + " )";
		sql += " and bsad is not null ";
		sql += " order by bsfr desc ";
		
		if(count > 0)
		{
			sql += "limit " + count + ", 1";
		}
		System.out.println(sql);
		
		this.OpenQuery(sql);		
		if(this.GetNext() == true)
		{
			positiveVO vo = new positiveVO();
			
			vo.setBsno(this.GetValue("bsno"));
			vo.setBskey(this.GetValue("bskey"));
			vo.setBsfr(this.GetValue("bsfr"));
			vo.setBkno(this.GetValue("bkno"));
			vo.setBkey(this.GetValue("bkey"));
			vo.setBsad(this.GetValue("bsad"));
			
			list.add(vo);
		}else
		{
			return null;
		}
		
		this.DBClose();
		return list;
	}	
	
	// 분석된 키워드
	public positiveVO K_Read(String bno)
	{
		if( this.DBOpen() == false )
		{
			return null;
		}
		
		String sql = "";
		sql  = "select * ";
		sql += "from bkeyword ";
		sql += "where bno = " + bno;
		this.OpenQuery(sql);
		if(this.GetNext() == false)
		{
			//해당 게시물 없음.
			this.DBClose();
			return null;
		}
	
		positiveVO vo = new positiveVO();
		vo.setBno(bno);
		vo.setBkno(this.GetValue("bkno"));
		vo.setBkey(this.GetValue("bkey"));
		vo.setBkfr(this.GetValue("bkfr"));
		
		this.DBClose();
		return vo;
	}
	
	// 분석된 유사도 
	public ArrayList<positiveVO> bsimilar(String bno, int limit3)
	{
		ArrayList<positiveVO> list = new ArrayList<positiveVO>();
		if( this.DBOpen() == false )
		{
			return list;
		}	
		String sql = "";
		sql  = "select bsno,bskey,bsfr,bkno,bsad, ";
		sql += "(select bkno from bkeyword where bkno = bsimilar.bkno) as bkno, ";
		sql += "(select bkey from bkeyword where bkno = bsimilar.bkno) as bkey ";
		sql += "from bsimilar ";
		sql += "where bkno = any(select bkno from bkeyword where bno = " + bno + " )";
		sql += " limit 0," + limit3;
		System.out.println(sql);
		
		this.OpenQuery(sql);		
		while(this.GetNext())
		{
			positiveVO vo = new positiveVO();
			
			vo.setBsno(this.GetValue("bsno"));
			vo.setBskey(this.GetValue("bskey"));
			vo.setBsfr(this.GetValue("bsfr"));
			vo.setBkno(this.GetValue("bkno"));
			vo.setBkey(this.GetValue("bkey"));
			vo.setBsad(this.GetValue("bsad"));
			
			list.add(vo);
		}
		
		this.DBClose();
		return list;
	}
	
	
	// 분석된 유사도 없으면 vip 상품
	public advertVO vip_ad(int pri)
	{
		if( this.DBOpen() == false )
		{
			return null;
		}	
		String sql = "";
		sql  = "select * ";
		sql += "from ad ";
		sql += "where ";
		sql += "vipWhether=1 "; 
		sql += "and vipStartDate <= now() and vipEndDate >= now() ";
		sql += "and vipPri=" + pri;
		sql += " limit 1 ";
		System.out.println(sql);
		
		this.OpenQuery(sql);
		advertVO vo = new advertVO();
		if(this.GetNext() == true)
		{
			vo.setAdvertno(this.GetValue("advertno"));
			vo.setCategory(this.GetValue("category"));
			vo.setSubclass(this.GetValue("subclass"));
			vo.setProductName(this.GetValue("productName"));
			vo.setPrice(this.GetValue("price"));
			vo.setImageURL(this.GetValue("imageURL"));
			vo.setDetailURL(this.GetValue("detailURL"));	
			vo.setVipWhether(this.GetValue("vipWhether"));	
			vo.setVipStartDate(this.GetValue("vipStartDate"));	
			vo.setVipEndDate(this.GetValue("vipEndDate"));	
			vo.setVipTimes(this.GetValue("vipTimes"));	
			vo.setVipPri(this.GetValue("vipPri"));	
			vo.setExposure_count(this.GetValue("exposure_count"));
			
		}else
		{
			this.DBClose();
			return null;
		}
		
		sql  = "update ad set exposure_count = exposure_count + 1 ";
		sql += "where advertno = '" + vo.getAdvertno() +"'";
		
		this.RunSQL(sql);
		
		this.DBClose();
		return vo;
		
		
	}
	
	
	//분석된 키워드 순위 
	public ArrayList<positiveVO> bkeyword(String bno, int limit2)
	{
		ArrayList<positiveVO> list = new ArrayList<positiveVO>();
		if( this.DBOpen() == false )
		{
			return list;
		}	
		String sql = "";
		sql  = "select bkey,bkfr,bkno ";
		sql += "from bkeyword ";
		sql += "where bno = " + bno ; 
		
		sql += " limit 0," + limit2;
		
			System.out.println(sql);
		
		this.OpenQuery(sql);		
		while(this.GetNext())
		{
			positiveVO vo = new positiveVO();
			
			vo.setBno(bno);
			vo.setBkno(this.GetValue("bkno"));
			vo.setBkey(this.GetValue("bkey"));
			vo.setBkfr(this.GetValue("bkfr"));
			
			list.add(vo);
		}
		
		this.DBClose();
		return list;
	}
	
		
	
	// 본문 에서 긍정확률 70% 이상 문단 조회 
	public ArrayList<positiveVO> positive_order(String bno, int limit1)
	{
		ArrayList<positiveVO> list = new ArrayList<positiveVO>();
		if( this.DBOpen() == false )
		{
			return list;
		}	
		String sql = "";
		sql  = "select bpno,bpsent,bposi ";
		sql += "from positive ";
		sql += "where bno = " + bno ; 
		
		sql += " limit 0," + limit1;
		
			System.out.println(sql);
		
		this.OpenQuery(sql);		
		while(this.GetNext())
		{
			positiveVO vo = new positiveVO();
			
			vo.setBno(bno);
			vo.setBpno(this.GetValue("bpno"));
			vo.setBpsent(this.GetValue("bpsent"));
			vo.setBposi(this.GetValue("bposi"));
			
			list.add(vo);
		}
		
		this.DBClose();
		return list;
	}
	
	
	// 광고물 등록
	//리턴값 : true - 등록성공, false - 등록실패	
	public boolean Insert(advertVO vo)
	{
		if( this.DBOpen() == false )
		{
			return false;
		}
		
		//ad 테이블에 자료를 등록한다.
		String sql = "";
		sql  = "insert into ad ";
		sql	+= " (advertno, category, subclass, productName, price, imageURL, detailURL, vipWhether, vipStartDate, vipEndDate) ";
		sql += " values ";
		sql += " ( ";
		sql += "'" + vo.getCategory() + "', ";
		sql += "'" + vo.getSubclass() + "', ";
		sql += "'" + vo.getProductName()  + "', ";
		sql += "'" + vo.getPrice()  + "', ";
		sql += "vipWhether = " + vo.getVipWhether() + ", ";
		sql += "'" + this._R(vo.getImageURL()).replace("<","&lt;").replace(">","&gt;").replace("\n","\n<br>")  + "', ";
		sql += "'" + this._R(vo.getDetailURL()).replace("<","&lt;").replace(">","&gt;").replace("\n","\n<br>") + "', ";
		if(vo.getVipWhether().equals("0"))
		{
			sql += "vipStartDate = null, ";
			sql += "vipEndDate = null ) ";
			
		}else if(vo.getVipWhether().equals("1"))
		{
			sql += "vipStartDate = '" + vo.getVipStartDate() + "', ";
			sql += "vipEndDate = '" + vo.getVipEndDate() + "', ";
			sql += "vipTimes = vipTimes + 1 ) ";
		}
		this.RunSQL(sql);

		//등록된 광고물의 번호를 얻는다.
		sql = "select last_insert_id() as adno ";
		this.OpenQuery(sql);
		this.GetNext();
		String advertno = this.GetValue("advertno");
		vo.setAdvertno(advertno);
		
		this.DBClose();
		return true;
	}
		
	// 등록된 광고물 삭제 ----------------------> 아직 미완성
	// 리턴값 : true - 삭제성공, false - 삭제실패	
	public boolean Delete(String advertno)
	{
		if( this.DBOpen() == false )
		{
			return false;
		}
		
		//광고물 삭제
		String sql = "";
		sql = "delete from adkeyword where advertno = " + advertno;
		this.RunSQL(sql);
		
		sql = "delete from adke where advertno = " + advertno;
		
		this.DBClose();
		return true;		
	}
		
	// 광고물 변경
	//리턴값 : true - 등록성공, false - 등록실패	
	public boolean Update(advertVO vo)
	{
		if( this.DBOpen() == false )
		{
			return false;
		}
		
		//ad 테이블의 광고물을 변경한다.
		String sql = "";
		sql  = "update ad set ";
		sql += "category = '" + vo.getCategory() + "', ";
		sql += "subclass = '" + vo.getSubclass() + "', ";
		sql += "productName = '" + _R(vo.getProductName()).replace("<","&lt;").replace(">","&gt;").replace("\n","\n<br>") + "', ";
		sql += "price = '" + vo.getPrice() + "', ";
		sql += "detailURL = '" + this._R(vo.getDetailURL()).replace("<","&lt;").replace(">","&gt;").replace("\n","\n<br>") + "', ";
		sql += "vipWhether = " + vo.getVipWhether() + ", ";
		
		if(vo.getVipWhether().equals("0"))
		{
			sql += "vipStartDate = null, ";
			sql += "vipEndDate = null ";
			
		}else if(vo.getVipWhether().equals("1"))
		{
			sql += "vipStartDate = '" + vo.getVipStartDate() + "', ";
			sql += "vipEndDate = '" + vo.getVipEndDate() + "', ";
			sql += "vipTimes = vipTimes + 1 ";
		}
		
		sql += "where advertno = '" + vo.getAdvertno() + "' ";
		this.RunSQL(sql);
		
		this.DBClose();
		return true;
	}
			
		
	// 광고물 상세 정보 정보 조회
	public advertVO Read(String advertno)
	{
		if( this.DBOpen() == false )
		{
			return null;
		}
		
		String sql = "";
		//해당 광고물 번호에 대한 정보를 조회한다.
		sql  = "select advertno, category, subclass, productName, price, imageURL, detailURL, vipWhether, vipStartDate, vipEndDate, vipTimes, exposure_count ";
		sql += "from ad ";
		sql += "where advertno = " + advertno;
		this.OpenQuery(sql);
		if(this.GetNext() == false)
		{
			//해당 광고물 없음.
			this.DBClose();
			return null;
		}
	
		advertVO vo = new advertVO();
		vo.setAdvertno(advertno);
		vo.setCategory(this.GetValue("category"));
		vo.setSubclass(this.GetValue("subclass"));
		vo.setProductName(this.GetValue("productName"));
		vo.setPrice(this.GetValue("price"));
		vo.setImageURL(this.GetValue("imageURL"));
		vo.setDetailURL(this.GetValue("detailURL"));
		vo.setVipWhether(this.GetValue("vipWhether"));
		vo.setVipStartDate(this.GetValue("vipStartDate"));	
		vo.setVipEndDate(this.GetValue("vipEndDate"));	
		vo.setVipTimes(this.GetValue("vipTimes"));
		vo.setExposure_count(this.GetValue("exposure_count"));
		
		this.DBClose();
		return vo;
	}
	
	// 등록된 전체 광고물 개수 조회
	public int GetTotal(String page, String category, String subclass, String search_type, String detail_vip, String sort_type, String keyword)
	{
		int total = 0;
		if( this.DBOpen() == false )
		{
			return total;
		}
		
		//광고물의 갯수를 얻는다.
		String sql = "";
		sql  = "select count(*) as count "; 
		sql += "from ad ";
		
		
		if(category.equals("") && subclass.equals(""))
		{
			sql +=" where category = category ";
			
		}else if(!category.equals(""))
		{
			sql +=" where category = '"+ category +"' ";
			
		}else if(!subclass.equals(""))
		{
			sql +=" where subclass = '"+ subclass +"' ";
			
		}else if(category.equals("") && !subclass.equals(""))
		{
			sql +=" where category = category ";
			
		}else if(subclass.equals("") && !category.equals(""))
		{
			sql +=" where subclass = subclass ";
			
		}else if(!category.equals("") && !subclass.equals(""))
		{
			sql +=" where category = '"+ category +"' ";
			sql +=" and subclass = '"+ subclass +"' ";
		}
		
		String and = "";
		
		if(!keyword.equals(""))
		{	
			if(search_type.equals("category") && detail_vip.equals("A"))
			{
				//search_type = '카테고리' 이고, vip 상관 X
				and += "and ( category like '%" + keyword + "%' ";
				and += "or subclass like '%" + keyword + "%' ) ";
			
			}else if(search_type.equals("category") && detail_vip.equals("N"))
			{
				//search_type = '카테고리' 이고, vip 상품이 아닐시
				and += "and ( category like '%" + keyword + "%' ";
				and += "or subclass like '%" + keyword + "%' ) ";
				and += "and vipWhether = 0 ";
			}else if(search_type.equals("category") && detail_vip.equals("Y"))
			{
				//search_type = '카테고리' 이고, vip 상품일시
				and += "and ( category like '%" + keyword + "%' ";
				and += "or subclass like '%" + keyword + "%' ) ";
				and += "and vipWhether = 1 ";
			}else if(search_type.equals("product_name") && detail_vip.equals("A"))
			{
				//search_type = '상품명'일시, vip 상관 X
				and += "and productName like '%" + keyword + "%' ";
				
			}else if(search_type.equals("product_name") && detail_vip.equals("N"))
			{
				//search_type = '상품명'일시, vip 상품이 아닐시
				and += "and productName like '%" + keyword + "%' ";
				and += "and vipWhether = 0 ";
				
			}else if(search_type.equals("product_name") && detail_vip.equals("Y"))
			{
				//search_type = '상품명'일시, vip 상품일시
				and += "and productName like '%" + keyword + "%' ";
				and += "and vipWhether = 1 ";
				
			}else if(search_type.equals("all") && detail_vip.equals("A"))
			{
				//search_type = '모두'이고, vip 상관 X
				and += "and ( category like '%" + keyword + "%' ";
				and += "or subclass like '%" + keyword + "%' ";
				and += "or productName like '%" + keyword + "%' ) ";
				
			}else if(search_type.equals("all") && detail_vip.equals("N"))
			{
				//search_type = '모두'이고 vip상품이 아닐시
				and += "and ( category like '%" + keyword + "%' ";
				and += "or subclass like '%" + keyword + "%' ";
				and += "or productName like '%" + keyword + "%' ) ";
				and += "and vipWhether = 0 ";
				
			}else if(search_type.equals("all") && detail_vip.equals("Y"))
			{
				//search_type = '모두'이고 vip 상품일시 
				and += "and ( category like '%" + keyword + "%' ";
				and += "or subclass like '%" + keyword + "%'  ";
				and += "or productName like '%" + keyword + "%' )";
				and += "and vipWhether = 1 ";
			}
		}else
		{	// 키워드가 없는 경우
			if(detail_vip.equals("A"))
			{
				//vip 상관 X 
				and += "";
			}else if(detail_vip.equals("N"))
			{
				//vip 상품일시 
				and += "and vipWhether = 0 ";
			}else if(detail_vip.equals("Y"))
			{
				//vip 상품일시 
				and += "and vipWhether = 1 ";
			}
		}
		
		sql += and;
			
		
		this.OpenQuery(sql);
		
		if(this.GetNext() == false)
		{
			this.DBClose();
			return total;
		}
		
		total = this.GetInt("count");
		this.CloseQuery();
		
		this.DBClose();
		return total;
	}
	
	// 페이지당 광고물 목록 조회 
	public ArrayList<advertVO> GetADList(int pageno, String category,String subclass, String search_type, String detail_vip, String sort_type, String keyword)
	{
		ArrayList<advertVO> list = new ArrayList<advertVO>();
		
		if( this.DBOpen() == false )
		{
			return list;
		}		
		
		//광고물 목록을 얻는다.
		String sql = "";
		sql  = "select advertno, category, subclass, productName, price, imageURL, detailURL, vipWhether, vipStartDate, vipEndDate, vipTimes";
		sql += " from ad ";
		
		if(category.equals("") && subclass.equals(""))
		{
			sql +=" where category = category ";
			
		}else if(!category.equals("") && subclass.equals(""))
		{
			sql +=" where category = '"+ category +"' ";
			
		}else if(!subclass.equals("") && category.equals(""))
		{
			sql +=" where subclass = '"+ subclass +"' ";
			
		}else if(category.equals("") && !subclass.equals(""))
		{
			sql +=" where category = category ";
			
		}else if(subclass.equals("") && !category.equals(""))
		{
			sql +=" where subclass = subclass ";
			
		}else if(!category.equals("") && !subclass.equals(""))
		{
			sql +=" where category = '"+ category +"' ";
			sql +=" and subclass = '"+ subclass +"' ";
		}
		
		String and = "";
		if(!keyword.equals(""))
		{
			if(search_type.equals("category") && detail_vip.equals("A"))
			{
				//search_type = '카테고리' 이고, vip 상관 X
				and += "and ( category like '%" + keyword + "%' ";
				and += "or subclass like '%" + keyword + "%' ) ";
			
			}else if(search_type.equals("category") && detail_vip.equals("N"))
			{
				//search_type = '카테고리'이고 vip 상품이 아닐시
				and += "and ( category like '%" + keyword + "%' ";
				and += "or subclass like '%" + keyword + "%' ) ";
				and += "and vipWhether = 0 ";
				
			}else if(search_type.equals("category") && detail_vip.equals("Y"))
			{
				//search_type = '카테고리'이고, vip 상품일시
				and += "and ( category like '%" + keyword + "%' ";
				and += "or subclass like '%" + keyword + "%' ) ";
				and += "and vipWhether = 1 ";
				
			}else if(search_type.equals("product_name") && detail_vip.equals("A"))
			{
				//search_type = '상품명'이고, vip 상품이 아닐시
				and += "and productName like '%" + keyword + "%' ";
				
			}else if(search_type.equals("product_name") && detail_vip.equals("N"))
			{
				//search_type = '상품명'이고, vip 상품이 아닐시
				and += "and productName like '%" + keyword + "%' ";
				and += "and vipWhether = 0 ";
				
			}else if(search_type.equals("product_name") && detail_vip.equals("Y"))
			{
				//search_type = '상품명'이고, vip 상품일시
				and += "and productName like '%" + keyword + "%' ";
				and += "and vipWhether = 1 ";
				
			}else if(search_type.equals("all") && detail_vip.equals("A"))
			{
				//search_type = '모두'이고 vip 상관X
				and += "and ( category like '%" + keyword + "%' ";
				and += "or subclass like '%" + keyword + "%' ) ";
				and += "and productName like '%" + keyword + "%' ";
				
			}else if(search_type.equals("all") && detail_vip.equals("N"))
			{
				//search_type = '모두'이고 vip 상품이 아닐시
				and += "and ( category like '%" + keyword + "%' ";
				and += "or subclass like '%" + keyword + "%' ) ";
				and += "and productName like '%" + keyword + "%' ";
				and += "and vipWhether = 0 ";
			}else if(search_type.equals("all") && detail_vip.equals("Y"))
			{
				//search_type = '모두'이고 vip 상품일시
				and += "and ( category like '%" + keyword + "%' ";
				and += "or subclass like '%" + keyword + "%' ) ";
				and += "and productName like '%" + keyword + "%' ";
				and += "and vipWhether = 1 ";
			}
			
		}else
		{	// 키워드가 없는 경우
			if(detail_vip.equals("A"))
			{
				//vip 상관 X 
				and += "";
			}else if(detail_vip.equals("N"))
			{
				//vip 상품일시 
				and += "and vipWhether = 0 ";
				
			}else if(detail_vip.equals("Y"))
			{
				//vip 상품일시 
				and += "and vipWhether = 1 ";
			}
		}
		
		sql += and;
		
		String orderBy = "";
		if(sort_type.equals("in_order"))
		{
			//sort_type = '가나다'일시
			orderBy += "order by category, subclass, productName desc ";
			
		}else if(sort_type.equals("by_category"))
		{
			//sort_type = '카테고리순'일시
			orderBy += "order by ( case "
					+ "when category = '패션' then 1 "
					+ "when category = '뷰티' then 2 "
					+ "when category = '출산/유아동' then 3 "
					+ "when category = '식품' then 4 "
					+ "when category = '주방용품' then 5 "
					+ "when category = '생활용품' then 6 "
					+ "when category = '홈인테리어' then 7 "
					+ "when category = '가전디지털' then 8 "
					+ "when category = '스포츠/레저' then 9 "
					+ "when category = '자동차용품' then 10 "
					+ "when category = '도서/음반/DVD' then 11 "
					+ "when category = '완구/취미' then 12 "
					+ "when category = '문구/오피스' then 13 "
					+ "when category = '반려동물용품' then 14 "
					+ "when category = '헬스/건강식품' then 15 "
					+ "else 16 end ) ";
			
		}else if(sort_type.equals("by_number"))
		{
			//sort_type = '최근등록순'일시
			orderBy += "order by advertno desc ";
			
		}else
		{
			//sort_type = '노출 빈도수'일시 -> 아직 보류
			orderBy += "order by producName desc ";
		}
			
		sql += orderBy;
		
		//페이지당 20개씩 가져오도록 limit 를 처리한다.
		int startno = 20 * (pageno - 1);
		sql += "limit " + startno + ",20 ";
		
		this.OpenQuery(sql);		
		while(this.GetNext())
		{
			advertVO vo = new advertVO();
			
			vo.setAdvertno(this.GetValue("advertno"));
			vo.setCategory(this.GetValue("category"));
			vo.setSubclass(this.GetValue("subclass"));
			vo.setProductName(this.GetValue("productName"));
			vo.setPrice(this.GetValue("price"));
			vo.setImageURL(this.GetValue("imageURL"));
			vo.setDetailURL(this.GetValue("detailURL"));
			vo.setDetailURL(this.GetValue("detailURL"));
			vo.setVipWhether(this.GetValue("vipWhether"));
			vo.setVipStartDate(this.GetValue("vipStartDate"));
			vo.setVipEndDate(this.GetValue("vipEndDate"));
			vo.setVipTimes(this.GetValue("vipTimes"));
			vo.setExposure_count(this.GetValue("exposure_count"));
			
			list.add(vo);
		}
		
		this.DBClose();
		return list;
	}
	
	// 광고 상위 카테고리 반환 메소드 
	public ArrayList<advertVO> GetCategory()
	{
		ArrayList<advertVO> list = new ArrayList<advertVO>();

		
		if( this.DBOpen() == false )
		{
			return list;
		}		
		
		// 해당 상위 카테고리와 하위 카테고리를 얻는다.
		String sql = "";
		sql  = "select distinct category";
		sql += " from ad";
		sql += " where category = '패션'";
		
		this.OpenQuery(sql);		
		while(this.GetNext())
		{
			advertVO vo = new advertVO();
			vo.setCategory(this.GetValue("category"));
			
			list.add(vo);
		}
		
		// 해당 상위 카테고리와 하위 카테고리를 얻는다.
		sql  = "select distinct category";
		sql += " from ad";
		sql += " where category = '뷰티'";
		
		this.OpenQuery(sql);		
		while(this.GetNext())
		{
			advertVO vo = new advertVO();
			vo.setCategory(this.GetValue("category"));
			
			list.add(vo);
		}
		// 해당 상위 카테고리와 하위 카테고리를 얻는다.
		sql  = "select distinct category";
		sql += " from ad";
		sql += " where category = '출산/유아동'";
		
		this.OpenQuery(sql);		
		while(this.GetNext())
		{
			advertVO vo = new advertVO();
			vo.setCategory(this.GetValue("category"));
			
			list.add(vo);
		}
		
		// 해당 상위 카테고리와 하위 카테고리를 얻는다.
		sql  = "select distinct category";
		sql += " from ad";
		sql += " where category = '식품'";
		
		this.OpenQuery(sql);		
		while(this.GetNext())
		{
			advertVO vo = new advertVO();
			vo.setCategory(this.GetValue("category"));
			
			list.add(vo);
		}
		
		// 해당 상위 카테고리와 하위 카테고리를 얻는다.
		sql  = "select distinct category";
		sql += " from ad";
		sql += " where category = '주방용품'";
		
		this.OpenQuery(sql);		
		while(this.GetNext())
		{
			advertVO vo = new advertVO();
			vo.setCategory(this.GetValue("category"));
			
			list.add(vo);
		}
		
		// 해당 상위 카테고리와 하위 카테고리를 얻는다.
		sql  = "select distinct category";
		sql += " from ad";
		sql += " where category = '생활용품'";
		
		this.OpenQuery(sql);		
		while(this.GetNext())
		{
			advertVO vo = new advertVO();
			vo.setCategory(this.GetValue("category"));
			
			list.add(vo);
		}
		
		// 해당 상위 카테고리와 하위 카테고리를 얻는다.
		sql  = "select distinct category";
		sql += " from ad";
		sql += " where category = '홈인테리어'";
		
		this.OpenQuery(sql);		
		while(this.GetNext())
		{
			advertVO vo = new advertVO();
			vo.setCategory(this.GetValue("category"));
			
			list.add(vo);
		}
		
		// 해당 상위 카테고리와 하위 카테고리를 얻는다.
		sql  = "select distinct category";
		sql += " from ad";
		sql += " where category = '가전디지털'";
		
		this.OpenQuery(sql);		
		while(this.GetNext())
		{
			advertVO vo = new advertVO();
			vo.setCategory(this.GetValue("category"));
			
			list.add(vo);
		}
		
		// 해당 상위 카테고리와 하위 카테고리를 얻는다.
		sql  = "select distinct category";
		sql += " from ad";
		sql += " where category = '스포츠/레저'";
		
		this.OpenQuery(sql);		
		while(this.GetNext())
		{
			advertVO vo = new advertVO();
			vo.setCategory(this.GetValue("category"));
			
			list.add(vo);
		}
		
		// 해당 상위 카테고리와 하위 카테고리를 얻는다.
		sql  = "select distinct category";
		sql += " from ad";
		sql += " where category = '자동차용품'";
		
		this.OpenQuery(sql);		
		while(this.GetNext())
		{
			advertVO vo = new advertVO();
			vo.setCategory(this.GetValue("category"));
			
			list.add(vo);
		}
		
		// 해당 상위 카테고리와 하위 카테고리를 얻는다.
		sql  = "select distinct category";
		sql += " from ad";
		sql += " where category = '도서/음반/DVD'";
		
		this.OpenQuery(sql);		
		while(this.GetNext())
		{
			advertVO vo = new advertVO();
			vo.setCategory(this.GetValue("category"));
			
			list.add(vo);
		}
		
		// 해당 상위 카테고리와 하위 카테고리를 얻는다.
		sql  = "select distinct category";
		sql += " from ad";
		sql += " where category = '완구/취미'";
		
		this.OpenQuery(sql);		
		while(this.GetNext())
		{
			advertVO vo = new advertVO();
			vo.setCategory(this.GetValue("category"));
			
			list.add(vo);
		}
		
		// 해당 상위 카테고리와 하위 카테고리를 얻는다.
		sql  = "select distinct category";
		sql += " from ad";
		sql += " where category = '문구/오피스'";
		
		this.OpenQuery(sql);		
		while(this.GetNext())
		{
			advertVO vo = new advertVO();
			vo.setCategory(this.GetValue("category"));
			
			list.add(vo);
		}
		
		// 해당 상위 카테고리와 하위 카테고리를 얻는다.
		sql  = "select distinct category";
		sql += " from ad";
		sql += " where category = '반려동물용품'";
		
		this.OpenQuery(sql);		
		while(this.GetNext())
		{
			advertVO vo = new advertVO();
			vo.setCategory(this.GetValue("category"));
			
			list.add(vo);
		}
		
		// 해당 상위 카테고리와 하위 카테고리를 얻는다.
		sql  = "select distinct category";
		sql += " from ad";
		sql += " where category = '헬스/건강식품'";
		
		this.OpenQuery(sql);		
		while(this.GetNext())
		{
			advertVO vo = new advertVO();
			vo.setCategory(this.GetValue("category"));
			
			list.add(vo);
		}
		
		this.DBClose();
		return list;
			
	}

	// 광고 하위 카테고리 반환 메소드 
	public ArrayList<advertVO> GetSubCategory(String category)
	{
		ArrayList<advertVO> sublist = new ArrayList<advertVO>();
		
		if( this.DBOpen() == false )
		{
			return sublist;
		}		
		
		// 해당 상위 카테고리와 하위 카테고리를 얻는다.
		String sql = "";
		sql  = "select distinct subclass";
		sql += " from ad";
		sql += " where category = '" + category + "'";
		
		this.OpenQuery(sql);		
		while(this.GetNext())
		{
			advertVO vo = new advertVO();
			vo.setSubclass(this.GetValue("subclass"));
			sublist.add(vo);
		}
		
		this.DBClose();
		return sublist;

	}
	// 광고 하위 카테고리 반환 메소드(이중 리스트 반환)
	public ArrayList<ArrayList<advertVO>> GetSubCategory()
	{
		ArrayList<ArrayList<advertVO>> toplist = new ArrayList<>();
		ArrayList<advertVO> sublist = new ArrayList<advertVO>();

		
		if( this.DBOpen() == false )
		{
			return toplist;
		}		
		
		// 해당 상위 카테고리와 하위 카테고리를 얻는다.
		String sql = "";
		sql  = "select distinct subclass";
		sql += " from ad";
		sql += " where category = '패션'";
		
		this.OpenQuery(sql);		
		while(this.GetNext())
		{
			advertVO vo = new advertVO();
			vo.setSubclass(this.GetValue("subclass"));
			sublist.add(vo);
		}
		
		// 해당 상위 카테고리와 하위 카테고리를 얻는다.
		sql  = "select distinct subclass";
		sql += " from ad";
		sql += " where category = '뷰티'";
		
		this.OpenQuery(sql);		
		while(this.GetNext())
		{
			advertVO vo = new advertVO();
			vo.setSubclass(this.GetValue("subclass"));
			sublist.add(vo);
		}
		
		// 해당 상위 카테고리와 하위 카테고리를 얻는다.
		sql  = "select distinct subclass";
		sql += " from ad";
		sql += " where category = '출산/유아동'";
		
		this.OpenQuery(sql);		
		while(this.GetNext())
		{
			advertVO vo = new advertVO();
			vo.setSubclass(this.GetValue("subclass"));
			sublist.add(vo);
		}
		
		// 해당 상위 카테고리와 하위 카테고리를 얻는다.
		sql  = "select distinct subclass";
		sql += " from ad";
		sql += " where category = '식품'";
		
		this.OpenQuery(sql);		
		while(this.GetNext())
		{
			advertVO vo = new advertVO();
			vo.setSubclass(this.GetValue("subclass"));
			sublist.add(vo);
		}
		
		// 해당 상위 카테고리와 하위 카테고리를 얻는다.
		sql  = "select distinct subclass";
		sql += " from ad";
		sql += " where category = '주방용품'";
		
		this.OpenQuery(sql);		
		while(this.GetNext())
		{
			advertVO vo = new advertVO();
			vo.setSubclass(this.GetValue("subclass"));
			sublist.add(vo);
		}
		
		// 해당 상위 카테고리와 하위 카테고리를 얻는다.
		sql  = "select distinct subclass";
		sql += " from ad";
		sql += " where category = '생활용품'";
		
		this.OpenQuery(sql);		
		while(this.GetNext())
		{
			advertVO vo = new advertVO();
			vo.setSubclass(this.GetValue("subclass"));
			sublist.add(vo);
		}
		
		// 해당 상위 카테고리와 하위 카테고리를 얻는다.
		sql  = "select distinct subclass";
		sql += " from ad";
		sql += " where category = '홈인테리어'";
		
		this.OpenQuery(sql);		
		while(this.GetNext())
		{
			advertVO vo = new advertVO();
			vo.setSubclass(this.GetValue("subclass"));
			sublist.add(vo);
		}
		
		// 해당 상위 카테고리와 하위 카테고리를 얻는다.
		sql  = "select distinct subclass";
		sql += " from ad";
		sql += " where category = '가전디지털'";
		
		this.OpenQuery(sql);		
		while(this.GetNext())
		{
			advertVO vo = new advertVO();
			vo.setSubclass(this.GetValue("subclass"));
			sublist.add(vo);
		}
		
		// 해당 상위 카테고리와 하위 카테고리를 얻는다.
		sql  = "select distinct subclass";
		sql += " from ad";
		sql += " where category = '스포츠/레저'";
		
		this.OpenQuery(sql);		
		while(this.GetNext())
		{
			advertVO vo = new advertVO();
			vo.setSubclass(this.GetValue("subclass"));
			sublist.add(vo);
		}
		
		// 해당 상위 카테고리와 하위 카테고리를 얻는다.
		sql  = "select distinct subclass";
		sql += " from ad";
		sql += " where category = '자동차용품'";
		
		this.OpenQuery(sql);		
		while(this.GetNext())
		{
			advertVO vo = new advertVO();
			vo.setSubclass(this.GetValue("subclass"));
			sublist.add(vo);
		}
		
		// 해당 상위 카테고리와 하위 카테고리를 얻는다.
		sql  = "select distinct subclass";
		sql += " from ad";
		sql += " where category = '도서/음반/DVD'";
		
		this.OpenQuery(sql);		
		while(this.GetNext())
		{
			advertVO vo = new advertVO();
			vo.setSubclass(this.GetValue("subclass"));
			sublist.add(vo);
		}
		
		// 해당 상위 카테고리와 하위 카테고리를 얻는다.
		sql  = "select distinct subclass";
		sql += " from ad";
		sql += " where category = '완구/취미'";
		
		this.OpenQuery(sql);		
		while(this.GetNext())
		{
			advertVO vo = new advertVO();
			vo.setSubclass(this.GetValue("subclass"));
			sublist.add(vo);
		}
		
		// 해당 상위 카테고리와 하위 카테고리를 얻는다.
		sql  = "select distinct subclass";
		sql += " from ad";
		sql += " where category = '문구/오피스'";
		
		this.OpenQuery(sql);		
		while(this.GetNext())
		{
			advertVO vo = new advertVO();
			vo.setSubclass(this.GetValue("subclass"));
			sublist.add(vo);
		}
		
		// 해당 상위 카테고리와 하위 카테고리를 얻는다.
		sql  = "select distinct subclass";
		sql += " from ad";
		sql += " where category = '반려동물용품'";
		
		this.OpenQuery(sql);		
		while(this.GetNext())
		{
			advertVO vo = new advertVO();
			vo.setSubclass(this.GetValue("subclass"));
			sublist.add(vo);
		}
		
		// 해당 상위 카테고리와 하위 카테고리를 얻는다.
		sql  = "select distinct subclass";
		sql += " from ad";
		sql += " where category = '헬스/건강식품'";
		
		this.OpenQuery(sql);		
		while(this.GetNext())
		{
			advertVO vo = new advertVO();
			vo.setSubclass(this.GetValue("subclass"));
			sublist.add(vo);
		}
		
		toplist.add(sublist);
		this.DBClose();
		return toplist;
	}
}
	

